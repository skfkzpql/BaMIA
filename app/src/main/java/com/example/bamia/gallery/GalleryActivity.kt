package com.example.bamia.gallery

import android.app.AlertDialog
import android.graphics.BitmapFactory
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.view.KeyEvent
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.bamia.R

class GalleryActivity : AppCompatActivity() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: GalleryAdapter
    private lateinit var spinnerFilterType: Spinner
    private lateinit var etSearch: EditText
    private lateinit var btnFilter: ImageButton

    private var currentImages: List<SavedImage> = emptyList()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_gallery)

        spinnerFilterType = findViewById(R.id.spinnerFilterType)
        etSearch = findViewById(R.id.etSearch)
        btnFilter = findViewById(R.id.btnFilter)
        recyclerView = findViewById(R.id.recyclerViewGallery)
        recyclerView.layoutManager = GridLayoutManager(this, 3)

        val filterOptions = arrayOf("Ï†ÑÏ≤¥", "ÏïÑÍ∏∞Ïù¥Î¶Ñ", "Ïó∞ÎèÑ", "Ïõî", "Ïùº", "ÌëúÏ†ï")
        spinnerFilterType.adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, filterOptions)

        currentImages = GalleryManager.getSavedImages(this)
        adapter = GalleryAdapter(currentImages) { savedImage ->
            AlertDialog.Builder(this)
                .setTitle("Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú")
                .setMessage("Ïù¥ Ïù¥ÎØ∏ÏßÄÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÌååÏùºÎ™Ö: ${savedImage.displayName}")
                .setPositiveButton("ÏÇ≠Ï†ú") { _, _ ->
                    GalleryManager.deleteImage(this, savedImage)
                    refreshGallery()
                }
                .setNegativeButton("Ï∑®ÏÜå", null)
                .show()
        }
        recyclerView.adapter = adapter

        btnFilter.setOnClickListener {
            spinnerFilterType.performClick()
        }

        // üîπ ÌïÑÌÑ∞ ÏÑ†ÌÉù Ïãú Ï¶âÏãú Ï†ÅÏö©
        spinnerFilterType.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                applyFilter()
            }
            override fun onNothingSelected(parent: AdapterView<*>?) {}
        }

        // üîπ Í≤ÄÏÉâÏñ¥ ÏûÖÎ†• Ïãú Ïã§ÏãúÍ∞Ñ Í≤ÄÏÉâ
        etSearch.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                applyFilter()
            }
            override fun afterTextChanged(s: Editable?) {}
        })

        // üîπ ÏóîÌÑ∞ ÌÇ§ ÏûÖÎ†• Ïãú Í≤ÄÏÉâ Ïã§Ìñâ (Ï§ÑÎ∞îÍøà X)
        etSearch.setOnKeyListener { _, keyCode, event ->
            if (keyCode == KeyEvent.KEYCODE_ENTER && event.action == KeyEvent.ACTION_DOWN) {
                applyFilter()
                return@setOnKeyListener true
            }
            false
        }
    }

    // üîπ ÌïÑÌÑ∞ + Í≤ÄÏÉâ Ï†ÅÏö©
    private fun applyFilter() {
        val filterTypeText = spinnerFilterType.selectedItem.toString()
        val searchQuery = etSearch.text.toString().trim()

        currentImages = GalleryManager.getSavedImages(this).filter { image ->
            val matchesFilter = when (filterTypeText) {
                "ÏïÑÍ∏∞Ïù¥Î¶Ñ" -> image.displayName.contains("ÏïÑÍ∏∞Ïù¥Î¶Ñ", ignoreCase = true)
                "Ïó∞ÎèÑ" -> image.displayName.contains(Regex("\\d{4}")) // Ïó∞ÎèÑ ÌïÑÌÑ∞ (YYYY ÌòïÏãù)
                "Ïõî" -> image.displayName.contains(Regex("\\d{4}ÎÖÑ\\d{2}Ïõî")) // Ïó∞ÎèÑ+Ïõî ÌïÑÌÑ∞
                "Ïùº" -> image.displayName.contains(Regex("\\d{4}ÎÖÑ\\d{2}Ïõî\\d{2}Ïùº")) // Ïó∞ÎèÑ+Ïõî+Ïùº ÌïÑÌÑ∞
                "ÌëúÏ†ï" -> image.displayName.contains("ÌëúÏ†ï", ignoreCase = true)
                else -> true
            }
            val matchesSearch = searchQuery.isEmpty() || image.displayName.contains(searchQuery, ignoreCase = true)
            matchesFilter && matchesSearch
        }

        adapter.updateData(currentImages)
    }

    private fun refreshGallery() {
        currentImages = GalleryManager.getSavedImages(this)
        adapter.updateData(currentImages)
    }

    // üîπ GalleryAdapter ÌÅ¥ÎûòÏä§ ÎÇ¥Î∂ÄÏóê Ìè¨Ìï®
    class GalleryAdapter(
        private var images: List<SavedImage>,
        private val onDeleteClick: (SavedImage) -> Unit
    ) : RecyclerView.Adapter<GalleryAdapter.GalleryViewHolder>() {

        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): GalleryViewHolder {
            val view = LayoutInflater.from(parent.context)
                .inflate(R.layout.item_gallery, parent, false)
            return GalleryViewHolder(view)
        }

        override fun onBindViewHolder(holder: GalleryViewHolder, position: Int) {
            val savedImage = images[position]
            holder.bind(savedImage, onDeleteClick)
        }

        override fun getItemCount(): Int = images.size

        fun updateData(newImages: List<SavedImage>) {
            images = newImages
            notifyDataSetChanged()
        }

        class GalleryViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
            private val imageView: ImageView = itemView.findViewById(R.id.imageViewThumbnail)
            private val tvDisplayName: TextView = itemView.findViewById(R.id.tvCaptureReason)
            private val btnDelete: ImageButton = itemView.findViewById(R.id.btnDeleteImage)

            fun bind(savedImage: SavedImage, onDeleteClick: (SavedImage) -> Unit) {
                if (savedImage.uri != null) {
                    imageView.setImageURI(savedImage.uri)
                } else if (savedImage.file != null) {
                    imageView.setImageBitmap(BitmapFactory.decodeFile(savedImage.file.absolutePath))
                }

                tvDisplayName.text = savedImage.displayName

                imageView.setOnClickListener {
                    val context = itemView.context
                    val dialog = AlertDialog.Builder(context).create()
                    val fullImageView = ImageView(context).apply {
                        adjustViewBounds = true
                        scaleType = ImageView.ScaleType.FIT_CENTER
                        if (savedImage.uri != null) {
                            setImageURI(savedImage.uri)
                        } else if (savedImage.file != null) {
                            setImageBitmap(BitmapFactory.decodeFile(savedImage.file.absolutePath))
                        }
                    }
                    dialog.setView(fullImageView)
                    dialog.show()
                }

                btnDelete.setOnClickListener { onDeleteClick(savedImage) }
            }
        }
    }
}
